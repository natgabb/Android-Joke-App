package cs534.gabbamonte.castonguayboisvert.assign2;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;

import android.os.Bundle;
import android.os.Handler;
import android.app.Activity;
import android.content.SharedPreferences;
import android.database.Cursor;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

public class ShowJoke extends Activity {

	private TextView jokeView = null;
	private TextView answerView = null;
	private Handler handler = new Handler();

	private Cursor jokes = null;
	private Iterator<String[]> jokesIterator;
	private ArrayList<String[]> jokesArray;
	private String[] currentJoke = null;

	private static final int INDEX_OF_ID = 0;
	private static final int INDEX_OF_QUESTION = 1;
	private static final int INDEX_OF_ANSWER = 2;

	private boolean isCategorySelected = false;

	private AsyncDBHelper dbHelper;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_showjoke);

		dbHelper = MainPage.getAsyncDBHelper();

		getJokes();

		jokeView = (TextView) findViewById(R.id.textViewQuestion);
		answerView = (TextView) findViewById(R.id.textViewAnswer);

		if (isCategorySelected) {
			saveAndShuffle();
			showNextJoke();
		}

		Button showAnswerButton = (Button) findViewById(R.id.buttonShowAnswer);
		showAnswerButton.setOnClickListener(new OnClickListener() {
			public void onClick(View v) {
				stopTimer();
				showAnswer();
			}
		});

		Button nextJokeButton = (Button) findViewById(R.id.buttonNextJoke);
		nextJokeButton.setOnClickListener(new OnClickListener() {
			public void onClick(View v) {
				showNextJoke();

			}
		});

		Button deleteJokeButton = (Button) findViewById(R.id.buttonDeleteJoke);
		deleteJokeButton.setOnClickListener(new OnClickListener() {
			public void onClick(View v) {
				deleteJoke();

			}
		});

		Button backButton = (Button) findViewById(R.id.showjoke_backButton);
		backButton.setOnClickListener(new OnClickListener() {
			public void onClick(View v) {
				ShowJoke.this.finish();
			}
		});
	}

	private void getJokes() {
		SharedPreferences prefs = getSharedPreferences(MainPage.TAG,
				MODE_PRIVATE);

		ArrayList<String> categories = new ArrayList<String>();
		String category = null;

		Cursor categoryCursor = dbHelper.getCategories();

		while (categoryCursor.moveToNext()) {
			category = categoryCursor.getString(1);
			if (prefs.getBoolean(category, true))
				categories.add(category);
		}

		categoryCursor.close();

		if (!categories.isEmpty()) {
			jokes = dbHelper.getJokesInCategories(categories
					.toArray(new String[0]));
			if (jokes != null) {
				if (jokes.getCount() >= 1) {
					isCategorySelected = true;
				} else
					displayToastAndLeave(getString(R.string.showjoke_categoryempty));
			} else
				displayToastAndLeave(getString(R.string.showjoke_retrievingerror));
		} else
			displayToastAndLeave(getString(R.string.showjoke_nocategory));
	}

	private void displayToastAndLeave(String message) {
		Toast.makeText(this, message, Toast.LENGTH_SHORT).show();
		isCategorySelected = false;
		this.finish();
	}

	private void saveAndShuffle() {
		jokesArray = new ArrayList<String[]>();

		while (jokes.moveToNext()) {
			jokesArray.add(new String[] { "" + jokes.getInt(INDEX_OF_ID),
					jokes.getString(INDEX_OF_QUESTION),
					jokes.getString(INDEX_OF_ANSWER) });
		}
		shuffleJokes();
	}

	private void shuffleJokes() {
		Collections.shuffle(jokesArray);
		jokesIterator = jokesArray.iterator();
	}

	private void showNextJoke() {
		stopTimer();

		if (!jokesIterator.hasNext())
			shuffleJokes();

		currentJoke = jokesIterator.next();

		jokeView.setText(currentJoke[INDEX_OF_QUESTION]);
		answerView.setVisibility(TextView.INVISIBLE);
		answerView.setText(currentJoke[INDEX_OF_ANSWER]);

		handler.postDelayed(showAnswerRunnable, 3500);
	}

	private void showAnswer() {
		answerView.setVisibility(TextView.VISIBLE);
	}

	private void deleteJoke() {
		jokesIterator.remove();

		if (dbHelper.deleteJoke(Integer.parseInt(currentJoke[INDEX_OF_ID]))) {
			Toast.makeText(this, getString(R.string.showjoke_deleted),
					Toast.LENGTH_SHORT).show();

			if (jokesArray.isEmpty())
				displayToastAndLeave(getString(R.string.showjoke_emptiedcategories));
			else
				showNextJoke();
		} else
			Toast.makeText(this, getString(R.string.showjoke_deletionerror),
					Toast.LENGTH_SHORT).show();
	}

	@SuppressWarnings("unused")
	private void switchCategory() {
		Log.v(MainPage.DEBUG_TAG, "Switch Category not yet implemented");
	}

	private void stopTimer() {
		handler.removeCallbacks(showAnswerRunnable);
	}

	Runnable showAnswerRunnable = new Runnable() {
		public void run() {
			showAnswer();
		}
	};
}
